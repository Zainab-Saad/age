/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
LOAD 'age';
SET search_path TO ag_catalog;
SELECT create_graph('cypher_create');
NOTICE:  graph "cypher_create" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a agtype);
 a 
---
(0 rows)

-- vertex graphid
SELECT * FROM cypher('cypher_create', $$CREATE (:v)$$) AS (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$CREATE (:v {})$$) AS (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$CREATE (:v {key: 'value'})$$) AS (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$MATCH (n:v) RETURN n$$) AS (n agtype);
                                n                                
-----------------------------------------------------------------
 {"id": 2, "label": "v", "properties": {}}::vertex
 {"id": 3, "label": "v", "properties": {}}::vertex
 {"id": 4, "label": "v", "properties": {"key": "value"}}::vertex
(3 rows)

-- Left relationship
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id:"right rel, initial node"})-[:e {id:"right rel"}]->(:v {id:"right rel, end node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- Right relationship
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id:"left rel, initial node"})<-[:e {id:"left rel"}]-(:v {id:"left rel, end node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- Pattern creates a path from the initial node to the last node
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id: "path, initial node"})-[:e {id: "path, edge one"}]->(:v {id:"path, middle node"})-[:e {id:"path, edge two"}]->(:v {id:"path, last node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- middle vertex points to the initial and last vertex
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id: "divergent, initial node"})<-[:e {id: "divergent, edge one"}]-(:v {id: "divergent middle node"})-[:e {id: "divergent, edge two"}]->(:v {id: "divergent, end node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- initial and last vertex point to the middle vertex
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id: "convergent, initial node"})-[:e {id: "convergent, edge one"}]->(:v {id: "convergent middle node"})<-[:e {id: "convergent, edge two"}]-(:v {id: "convergent, end node"})
$$) AS (a agtype);
 a 
---
(0 rows)

-- Validate Paths work correctly
SELECT * FROM cypher('cypher_create', $$
    CREATE (:v {id: "paths, vertex one"})-[:e {id: "paths, edge one"}]->(:v {id: "paths, vertex two"}),
           (:v {id: "paths, vertex three"})-[:e {id: "paths, edge two"}]->(:v {id: "paths, vertex four"})
$$) AS (a agtype);
 a 
---
(0 rows)

--edge with double relationship will throw an error
SELECT * FROM cypher('cypher_create', $$CREATE (:v)<-[:e]->()$$) AS (a agtype);
ERROR:  syntax error at or near ">"
LINE 1: ... FROM cypher('cypher_create', $$CREATE (:v)<-[:e]->()$$) AS ...
                                                             ^
--edge with no relationship will throw an error
SELECT * FROM cypher('cypher_create', $$CREATE (:v)-[:e]-()$$) AS (a agtype);
ERROR:  only directed relationships are allowed in CREATE
LINE 1: ...LECT * FROM cypher('cypher_create', $$CREATE (:v)-[:e]-()$$)...
                                                             ^
--edges without labels are not supported
SELECT * FROM cypher('cypher_create', $$CREATE (:v)-[]->(:v)$$) AS (a agtype);
ERROR:  relationships must be specify a label in CREATE.
LINE 1: ...LECT * FROM cypher('cypher_create', $$CREATE (:v)-[]->(:v)$$...
                                                             ^
SELECT * FROM cypher_create.e;
 id | start_id | end_id |           properties           | label_id | start_label_id | end_label_id 
----+----------+--------+--------------------------------+----------+----------------+--------------
  1 |        5 |      6 | {"id": "right rel"}            |        4 |              3 |            3
  2 |        8 |      7 | {"id": "left rel"}             |        4 |              3 |            3
  3 |       10 |     11 | {"id": "path, edge two"}       |        4 |              3 |            3
  4 |        9 |     10 | {"id": "path, edge one"}       |        4 |              3 |            3
  5 |       13 |     14 | {"id": "divergent, edge two"}  |        4 |              3 |            3
  6 |       13 |     12 | {"id": "divergent, edge one"}  |        4 |              3 |            3
  7 |       17 |     16 | {"id": "convergent, edge two"} |        4 |              3 |            3
  8 |       15 |     16 | {"id": "convergent, edge one"} |        4 |              3 |            3
  9 |       18 |     19 | {"id": "paths, edge one"}      |        4 |              3 |            3
 10 |       20 |     21 | {"id": "paths, edge two"}      |        4 |              3 |            3
(10 rows)

SELECT * FROM cypher_create.v;
 id |             properties             | label_id 
----+------------------------------------+----------
  2 | {}                                 |        3
  3 | {}                                 |        3
  4 | {"key": "value"}                   |        3
  5 | {"id": "right rel, initial node"}  |        3
  6 | {"id": "right rel, end node"}      |        3
  7 | {"id": "left rel, initial node"}   |        3
  8 | {"id": "left rel, end node"}       |        3
  9 | {"id": "path, initial node"}       |        3
 10 | {"id": "path, middle node"}        |        3
 11 | {"id": "path, last node"}          |        3
 12 | {"id": "divergent, initial node"}  |        3
 13 | {"id": "divergent middle node"}    |        3
 14 | {"id": "divergent, end node"}      |        3
 15 | {"id": "convergent, initial node"} |        3
 16 | {"id": "convergent middle node"}   |        3
 17 | {"id": "convergent, end node"}     |        3
 18 | {"id": "paths, vertex one"}        |        3
 19 | {"id": "paths, vertex two"}        |        3
 20 | {"id": "paths, vertex three"}      |        3
 21 | {"id": "paths, vertex four"}       |        3
(20 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE (:n_var {name: 'Node A'})
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE (:n_var {name: 'Node B'})
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE (:n_var {name: 'Node C'})
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var), (b:n_var)
	WHERE a.name <> b.name
	CREATE (a)-[:e_var {name: a.name + ' -> ' + b.name}]->(b)
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	CREATE (a)-[:e_var {name: a.name + ' -> ' + a.name}]->(a)
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	CREATE (a)-[:e_var {name: a.name + ' -> new node'}]->(:n_other_node)
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	WHERE a.name = 'Node A'
	CREATE (a)-[b:e_var]->()
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE (a)-[:b_var]->()
	RETURN a, id(a)
$$) as (a agtype, b agtype);
                         a                         | b  
---------------------------------------------------+----
 {"id": 29, "label": "", "properties": {}}::vertex | 29
(1 row)

SELECT * FROM cypher('cypher_create', $$
	CREATE ()-[b:e_var]->()
	RETURN b, id(b)
$$) as (a agtype, b agtype);
                                         a                                          | b  
------------------------------------------------------------------------------------+----
 {"id": 25, "label": "e_var", "end_id": 32, "start_id": 31, "properties": {}}::edge | 25
(1 row)

SELECT * FROM cypher('cypher_create', $$
	CREATE (a)-[b:e_var {id: 0}]->()
	RETURN a, b, b.id, b.id + 1
$$) as (a agtype, b agtype, c agtype, d agtype);
                         a                         |                                             b                                             | c | d 
---------------------------------------------------+-------------------------------------------------------------------------------------------+---+---
 {"id": 33, "label": "", "properties": {}}::vertex | {"id": 26, "label": "e_var", "end_id": 34, "start_id": 33, "properties": {"id": 0}}::edge | 0 | 1
(1 row)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	CREATE (a)-[b:e_var]->(a)
	RETURN a, b
$$) as (a agtype, b agtype);
                                   a                                    |                                         b                                          
------------------------------------------------------------------------+------------------------------------------------------------------------------------
 {"id": 22, "label": "n_var", "properties": {"name": "Node A"}}::vertex | {"id": 27, "label": "e_var", "end_id": 22, "start_id": 22, "properties": {}}::edge
 {"id": 23, "label": "n_var", "properties": {"name": "Node B"}}::vertex | {"id": 28, "label": "e_var", "end_id": 23, "start_id": 23, "properties": {}}::edge
 {"id": 24, "label": "n_var", "properties": {"name": "Node C"}}::vertex | {"id": 29, "label": "e_var", "end_id": 24, "start_id": 24, "properties": {}}::edge
(3 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	CREATE (a)-[b:e_var]->(c)
	RETURN a, b, c
$$) as (a agtype, b agtype, c agtype);
                                   a                                    |                                         b                                          |                         c                         
------------------------------------------------------------------------+------------------------------------------------------------------------------------+---------------------------------------------------
 {"id": 22, "label": "n_var", "properties": {"name": "Node A"}}::vertex | {"id": 30, "label": "e_var", "end_id": 35, "start_id": 22, "properties": {}}::edge | {"id": 35, "label": "", "properties": {}}::vertex
 {"id": 23, "label": "n_var", "properties": {"name": "Node B"}}::vertex | {"id": 31, "label": "e_var", "end_id": 36, "start_id": 23, "properties": {}}::edge | {"id": 36, "label": "", "properties": {}}::vertex
 {"id": 24, "label": "n_var", "properties": {"name": "Node C"}}::vertex | {"id": 32, "label": "e_var", "end_id": 37, "start_id": 24, "properties": {}}::edge | {"id": 37, "label": "", "properties": {}}::vertex
(3 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE (a)-[:e_var]->()
	RETURN a
$$) as (b agtype);
                         b                         
---------------------------------------------------
 {"id": 38, "label": "", "properties": {}}::vertex
(1 row)

SELECT * FROM cypher('cypher_create', $$
	CREATE ()-[b:e_var]->()
	RETURN b
$$) as (b agtype);
                                         b                                          
------------------------------------------------------------------------------------
 {"id": 34, "label": "e_var", "end_id": 41, "start_id": 40, "properties": {}}::edge
(1 row)

SELECT * FROM cypher('cypher_create', $$
	CREATE p=()-[:e_var]->()
	RETURN p
$$) as (b agtype);
                                                                                                b                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"id": 42, "label": "", "properties": {}}::vertex, {"id": 35, "label": "e_var", "end_id": 43, "start_id": 42, "properties": {}}::edge, {"id": 43, "label": "", "properties": {}}::vertex]::path
(1 row)

SELECT * FROM cypher('cypher_create', $$
	CREATE p=(a {id:0})-[:e_var]->(a)
	RETURN p
$$) as (b agtype);
                                                                                                       b                                                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"id": 44, "label": "", "properties": {"id": 0}}::vertex, {"id": 36, "label": "e_var", "end_id": 44, "start_id": 44, "properties": {}}::edge, {"id": 44, "label": "", "properties": {"id": 0}}::vertex]::path
(1 row)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	CREATE p=(a)-[:e_var]->(a)
	RETURN p
$$) as (b agtype);
                                                                                                                     b                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"id": 22, "label": "n_var", "properties": {"name": "Node A"}}::vertex, {"id": 37, "label": "e_var", "end_id": 22, "start_id": 22, "properties": {}}::edge, {"id": 22, "label": "n_var", "properties": {"name": "Node A"}}::vertex]::path
 [{"id": 23, "label": "n_var", "properties": {"name": "Node B"}}::vertex, {"id": 38, "label": "e_var", "end_id": 23, "start_id": 23, "properties": {}}::edge, {"id": 23, "label": "n_var", "properties": {"name": "Node B"}}::vertex]::path
 [{"id": 24, "label": "n_var", "properties": {"name": "Node C"}}::vertex, {"id": 39, "label": "e_var", "end_id": 24, "start_id": 24, "properties": {}}::edge, {"id": 24, "label": "n_var", "properties": {"name": "Node C"}}::vertex]::path
(3 rows)

SELECT * FROM cypher('cypher_create', $$
	CREATE p=(a)-[:e_var]->(), (a)-[b:e_var]->(a)
	RETURN p, b
$$) as (a agtype, b agtype);
                                                                                                a                                                                                                 |                                         b                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------
 [{"id": 45, "label": "", "properties": {}}::vertex, {"id": 40, "label": "e_var", "end_id": 46, "start_id": 45, "properties": {}}::edge, {"id": 46, "label": "", "properties": {}}::vertex]::path | {"id": 41, "label": "e_var", "end_id": 45, "start_id": 45, "properties": {}}::edge
(1 row)

SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	WHERE a.name = 'Node Z'
	CREATE (a)-[:e_var {name: a.name + ' -> does not exist'}]->(:n_other_node)
	RETURN a
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher_create.n_var;
 id |     properties     | label_id 
----+--------------------+----------
 22 | {"name": "Node A"} |        5
 23 | {"name": "Node B"} |        5
 24 | {"name": "Node C"} |        5
(3 rows)

SELECT * FROM cypher_create.e_var;
 id | start_id | end_id |           properties           | label_id | start_label_id | end_label_id 
----+----------+--------+--------------------------------+----------+----------------+--------------
 11 |       22 |     23 | {"name": "Node A -> Node B"}   |        6 |              5 |            5
 12 |       22 |     24 | {"name": "Node A -> Node C"}   |        6 |              5 |            5
 13 |       23 |     22 | {"name": "Node B -> Node A"}   |        6 |              5 |            5
 14 |       23 |     24 | {"name": "Node B -> Node C"}   |        6 |              5 |            5
 15 |       24 |     22 | {"name": "Node C -> Node A"}   |        6 |              5 |            5
 16 |       24 |     23 | {"name": "Node C -> Node B"}   |        6 |              5 |            5
 17 |       22 |     22 | {"name": "Node A -> Node A"}   |        6 |              5 |            5
 18 |       23 |     23 | {"name": "Node B -> Node B"}   |        6 |              5 |            5
 19 |       24 |     24 | {"name": "Node C -> Node C"}   |        6 |              5 |            5
 20 |       22 |     25 | {"name": "Node A -> new node"} |        6 |              5 |            7
 21 |       23 |     26 | {"name": "Node B -> new node"} |        6 |              5 |            7
 22 |       24 |     27 | {"name": "Node C -> new node"} |        6 |              5 |            7
 23 |       22 |     28 | {}                             |        6 |              5 |            1
 25 |       31 |     32 | {}                             |        6 |              1 |            1
 26 |       33 |     34 | {"id": 0}                      |        6 |              1 |            1
 27 |       22 |     22 | {}                             |        6 |              5 |            5
 28 |       23 |     23 | {}                             |        6 |              5 |            5
 29 |       24 |     24 | {}                             |        6 |              5 |            5
 30 |       22 |     35 | {}                             |        6 |              5 |            1
 31 |       23 |     36 | {}                             |        6 |              5 |            1
 32 |       24 |     37 | {}                             |        6 |              5 |            1
 33 |       38 |     39 | {}                             |        6 |              1 |            1
 34 |       40 |     41 | {}                             |        6 |              1 |            1
 35 |       42 |     43 | {}                             |        6 |              1 |            1
 36 |       44 |     44 | {}                             |        6 |              1 |            1
 37 |       22 |     22 | {}                             |        6 |              5 |            5
 38 |       23 |     23 | {}                             |        6 |              5 |            5
 39 |       24 |     24 | {}                             |        6 |              5 |            5
 40 |       45 |     46 | {}                             |        6 |              1 |            1
 41 |       45 |     45 | {}                             |        6 |              1 |            1
(30 rows)

--Check every label has been created
SELECT name, kind FROM ag_label ORDER BY name;
       name       | kind 
------------------+------
 _ag_label_edge   | e
 _ag_label_vertex | v
 b_var            | e
 e                | e
 e_var            | e
 n_other_node     | v
 n_var            | v
 v                | v
(8 rows)

--Validate every vertex has the correct label
SELECT * FROM cypher('cypher_create', $$MATCH (n) RETURN n$$) AS (n agtype);
                                         n                                          
------------------------------------------------------------------------------------
 {"id": 1, "label": "", "properties": {}}::vertex
 {"id": 28, "label": "", "properties": {}}::vertex
 {"id": 29, "label": "", "properties": {}}::vertex
 {"id": 30, "label": "", "properties": {}}::vertex
 {"id": 31, "label": "", "properties": {}}::vertex
 {"id": 32, "label": "", "properties": {}}::vertex
 {"id": 33, "label": "", "properties": {}}::vertex
 {"id": 34, "label": "", "properties": {}}::vertex
 {"id": 35, "label": "", "properties": {}}::vertex
 {"id": 36, "label": "", "properties": {}}::vertex
 {"id": 37, "label": "", "properties": {}}::vertex
 {"id": 38, "label": "", "properties": {}}::vertex
 {"id": 39, "label": "", "properties": {}}::vertex
 {"id": 40, "label": "", "properties": {}}::vertex
 {"id": 41, "label": "", "properties": {}}::vertex
 {"id": 42, "label": "", "properties": {}}::vertex
 {"id": 43, "label": "", "properties": {}}::vertex
 {"id": 44, "label": "", "properties": {"id": 0}}::vertex
 {"id": 45, "label": "", "properties": {}}::vertex
 {"id": 46, "label": "", "properties": {}}::vertex
 {"id": 2, "label": "v", "properties": {}}::vertex
 {"id": 3, "label": "v", "properties": {}}::vertex
 {"id": 4, "label": "v", "properties": {"key": "value"}}::vertex
 {"id": 5, "label": "v", "properties": {"id": "right rel, initial node"}}::vertex
 {"id": 6, "label": "v", "properties": {"id": "right rel, end node"}}::vertex
 {"id": 7, "label": "v", "properties": {"id": "left rel, initial node"}}::vertex
 {"id": 8, "label": "v", "properties": {"id": "left rel, end node"}}::vertex
 {"id": 9, "label": "v", "properties": {"id": "path, initial node"}}::vertex
 {"id": 10, "label": "v", "properties": {"id": "path, middle node"}}::vertex
 {"id": 11, "label": "v", "properties": {"id": "path, last node"}}::vertex
 {"id": 12, "label": "v", "properties": {"id": "divergent, initial node"}}::vertex
 {"id": 13, "label": "v", "properties": {"id": "divergent middle node"}}::vertex
 {"id": 14, "label": "v", "properties": {"id": "divergent, end node"}}::vertex
 {"id": 15, "label": "v", "properties": {"id": "convergent, initial node"}}::vertex
 {"id": 16, "label": "v", "properties": {"id": "convergent middle node"}}::vertex
 {"id": 17, "label": "v", "properties": {"id": "convergent, end node"}}::vertex
 {"id": 18, "label": "v", "properties": {"id": "paths, vertex one"}}::vertex
 {"id": 19, "label": "v", "properties": {"id": "paths, vertex two"}}::vertex
 {"id": 20, "label": "v", "properties": {"id": "paths, vertex three"}}::vertex
 {"id": 21, "label": "v", "properties": {"id": "paths, vertex four"}}::vertex
 {"id": 22, "label": "n_var", "properties": {"name": "Node A"}}::vertex
 {"id": 23, "label": "n_var", "properties": {"name": "Node B"}}::vertex
 {"id": 24, "label": "n_var", "properties": {"name": "Node C"}}::vertex
 {"id": 25, "label": "n_other_node", "properties": {}}::vertex
 {"id": 26, "label": "n_other_node", "properties": {}}::vertex
 {"id": 27, "label": "n_other_node", "properties": {}}::vertex
(46 rows)

-- prepared statements
PREPARE p_1 AS SELECT * FROM cypher('cypher_create', $$CREATE (v:new_vertex {key: 'value'}) RETURN v$$) AS (a agtype);
EXECUTE p_1;
                                     a                                     
---------------------------------------------------------------------------
 {"id": 47, "label": "new_vertex", "properties": {"key": "value"}}::vertex
(1 row)

EXECUTE p_1;
                                     a                                     
---------------------------------------------------------------------------
 {"id": 48, "label": "new_vertex", "properties": {"key": "value"}}::vertex
(1 row)

PREPARE p_2 AS SELECT * FROM cypher('cypher_create', $$CREATE (v:new_vertex {key: $var_name}) RETURN v$$, $1) AS (a agtype);
EXECUTE p_2('{"var_name": "Hello Prepared Statements"}');
                                               a                                               
-----------------------------------------------------------------------------------------------
 {"id": 49, "label": "new_vertex", "properties": {"key": "Hello Prepared Statements"}}::vertex
(1 row)

EXECUTE p_2('{"var_name": "Hello Prepared Statements 2"}');
                                                a                                                
-------------------------------------------------------------------------------------------------
 {"id": 50, "label": "new_vertex", "properties": {"key": "Hello Prepared Statements 2"}}::vertex
(1 row)

-- pl/pgsql
CREATE FUNCTION create_test()
RETURNS TABLE(vertex agtype)
LANGUAGE plpgsql
VOLATILE
AS $BODY$
BEGIN
	RETURN QUERY SELECT * FROM cypher('cypher_create', $$CREATE (v:new_vertex {key: 'value'}) RETURN v$$) AS (a agtype);
END
$BODY$;
SELECT create_test();
                                create_test                                
---------------------------------------------------------------------------
 {"id": 51, "label": "new_vertex", "properties": {"key": "value"}}::vertex
(1 row)

SELECT create_test();
                                create_test                                
---------------------------------------------------------------------------
 {"id": 52, "label": "new_vertex", "properties": {"key": "value"}}::vertex
(1 row)

--
-- Errors
--
-- Var 'a' cannot have properties in the create clause
SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	WHERE a.name = 'Node A'
	CREATE (a {test:1})-[:e_var]->()
$$) as (a agtype);
ERROR:  previously declared nodes in a create clause cannot have properties
LINE 4:  CREATE (a {test:1})-[:e_var]->()
                 ^
-- Var 'a' cannot change labels
SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)
	WHERE a.name = 'Node A'
	CREATE (a:new_label)-[:e_var]->()
$$) as (a agtype);
ERROR:  previously declared variables cannot have a label
LINE 4:  CREATE (a:new_label)-[:e_var]->()
                 ^
SELECT * FROM cypher('cypher_create', $$
	MATCH (a:n_var)-[b]-()
	WHERE a.name = 'Node A'
	CREATE (a)-[b:e_var]->()
$$) as (a agtype);
ERROR:  variable b already exists
LINE 4:  CREATE (a)-[b:e_var]->()
                    ^
-- A valid single vertex path
SELECT * FROM cypher('cypher_create', $$
	CREATE p=(a)
	RETURN p
$$) as (a agtype);
                             a                             
-----------------------------------------------------------
 [{"id": 53, "label": "", "properties": {}}::vertex]::path
(1 row)

--CREATE with joins
SELECT *
FROM cypher('cypher_create', $$
	CREATE (a)
	RETURN a
$$) as q(a agtype),
cypher('cypher_create', $$
	CREATE (b)
	RETURN b
$$) as t(b agtype);
ERROR:  cypher create clause cannot be rescanned
HINT:  its unsafe to use joins in a query with a Cypher CREATE clause
-- column definition list for CREATE clause must contain a single agtype
-- attribute
SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a int);
ERROR:  column definition list for CREATE clause must contain a single agtype attribute
LINE 1: SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a i...
                      ^
HINT:  ... cypher($$ ... CREATE ... $$) AS t(c agtype) ...
SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a agtype, b int);
ERROR:  column definition list for CREATE clause must contain a single agtype attribute
LINE 1: SELECT * FROM cypher('cypher_create', $$CREATE ()$$) AS (a a...
                      ^
HINT:  ... cypher($$ ... CREATE ... $$) AS t(c agtype) ...
-- nodes cannot use edge labels and edge labels cannot use node labels
SELECT * FROM cypher('cypher_create', $$
	CREATE
		(:existing_vlabel {id: 1})
		-[c:existing_elabel {id: 3}]->
		(:existing_vlabel {id: 2})
$$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$
	MATCH(a), (b)
		WHERE a.id = 1 AND b.id = 2
	CREATE (a)-[c:existing_vlabel { id: 4}]->(b)
	RETURN c.id
$$) as (c agtype);
ERROR:  label existing_vlabel is for vertices, not edges
LINE 4:  CREATE (a)-[c:existing_vlabel { id: 4}]->(b)
                    ^
SELECT * FROM cypher('cypher_create', $$
	CREATE (a:existing_elabel { id: 5})
	RETURN a.id
$$) as (a agtype);
ERROR:  label existing_elabel is for edges, not vertices
LINE 2:  CREATE (a:existing_elabel { id: 5})
                 ^
--
-- check the cypher CREATE clause inside an INSERT INTO
--
CREATE TABLE simple_path (u agtype, e agtype, v agtype);
INSERT INTO simple_path(SELECT * FROM cypher('cypher_create',
    $$CREATE (u)-[e:knows]->(v) return u, e, v
    $$) AS (u agtype, e agtype, v agtype));
SELECT count(*) FROM simple_path;
 count 
-------
     1
(1 row)

--
-- check the cypher CREATE clause inside of a BEGIN/END/COMMIT block
--
BEGIN;
SELECT * FROM cypher('cypher_create', $$ CREATE (a:Part {part_num: '670'}) $$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$ MATCH (a:Part) RETURN a $$) as (a agtype);
                                   a                                    
------------------------------------------------------------------------
 {"id": 59, "label": "Part", "properties": {"part_num": "670"}}::vertex
(1 row)

SELECT * FROM cypher('cypher_create', $$ CREATE (a:Part {part_num: '671'}) $$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$ CREATE (a:Part {part_num: '672'}) $$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$ MATCH (a:Part) RETURN a $$) as (a agtype);
                                   a                                    
------------------------------------------------------------------------
 {"id": 59, "label": "Part", "properties": {"part_num": "670"}}::vertex
 {"id": 60, "label": "Part", "properties": {"part_num": "671"}}::vertex
 {"id": 61, "label": "Part", "properties": {"part_num": "672"}}::vertex
(3 rows)

SELECT * FROM cypher('cypher_create', $$ CREATE (a:Part {part_num: '673'}) $$) as (a agtype);
 a 
---
(0 rows)

SELECT * FROM cypher('cypher_create', $$ MATCH (a:Part) RETURN a $$) as (a agtype);
                                   a                                    
------------------------------------------------------------------------
 {"id": 59, "label": "Part", "properties": {"part_num": "670"}}::vertex
 {"id": 60, "label": "Part", "properties": {"part_num": "671"}}::vertex
 {"id": 61, "label": "Part", "properties": {"part_num": "672"}}::vertex
 {"id": 62, "label": "Part", "properties": {"part_num": "673"}}::vertex
(4 rows)

END;
--
-- variable reuse
--
-- Valid variable reuse
SELECT * FROM cypher('cypher_create', $$
	CREATE (p)-[a:new]->(p)
	RETURN p,a,p
$$) as (n1 agtype, e agtype, n2 agtype);
                        n1                         |                                        e                                         |                        n2                         
---------------------------------------------------+----------------------------------------------------------------------------------+---------------------------------------------------
 {"id": 63, "label": "", "properties": {}}::vertex | {"id": 44, "label": "new", "end_id": 63, "start_id": 63, "properties": {}}::edge | {"id": 63, "label": "", "properties": {}}::vertex
(1 row)

SELECT * FROM cypher('cypher_create', $$
	CREATE (p:node)-[e:new]->(p)
	RETURN p,e,p
$$) as (n1 agtype, e agtype, n2 agtype);
                          n1                           |                                        e                                         |                          n2                           
-------------------------------------------------------+----------------------------------------------------------------------------------+-------------------------------------------------------
 {"id": 64, "label": "node", "properties": {}}::vertex | {"id": 45, "label": "new", "end_id": 64, "start_id": 64, "properties": {}}::edge | {"id": 64, "label": "node", "properties": {}}::vertex
(1 row)

SELECT * FROM cypher('cypher_create', $$
	CREATE (p)
	CREATE (p)-[a:new]->(p)
	RETURN p,a,p
$$) as (n1 agtype, e agtype, n2 agtype);
                        n1                         |                                        e                                         |                        n2                         
---------------------------------------------------+----------------------------------------------------------------------------------+---------------------------------------------------
 {"id": 65, "label": "", "properties": {}}::vertex | {"id": 46, "label": "new", "end_id": 65, "start_id": 65, "properties": {}}::edge | {"id": 65, "label": "", "properties": {}}::vertex
(1 row)

SELECT * FROM cypher('cypher_create', $$
	CREATE (p:n1)
	CREATE (p)-[a:new]->(p)
	RETURN p,a,p
$$) as (n1 agtype, e agtype, n2 agtype);
                         n1                          |                                        e                                         |                         n2                          
-----------------------------------------------------+----------------------------------------------------------------------------------+-----------------------------------------------------
 {"id": 66, "label": "n1", "properties": {}}::vertex | {"id": 47, "label": "new", "end_id": 66, "start_id": 66, "properties": {}}::edge | {"id": 66, "label": "n1", "properties": {}}::vertex
(1 row)

SELECT * FROM cypher('cypher_create', $$
	MATCH (p:node)
	CREATE (p)-[a:new]->(p)
	RETURN p,a,p
$$) as (n1 agtype, e agtype, n2 agtype);
                          n1                           |                                        e                                         |                          n2                           
-------------------------------------------------------+----------------------------------------------------------------------------------+-------------------------------------------------------
 {"id": 64, "label": "node", "properties": {}}::vertex | {"id": 48, "label": "new", "end_id": 64, "start_id": 64, "properties": {}}::edge | {"id": 64, "label": "node", "properties": {}}::vertex
(1 row)

-- Invalid variable reuse
SELECT * FROM cypher('cypher_create', $$
	CREATE (p)-[a:new]->(p {n0:'n1'})
$$) as (a agtype);
ERROR:  previously declared nodes in a create clause cannot have properties
LINE 2:  CREATE (p)-[a:new]->(p {n0:'n1'})
                              ^
SELECT * FROM cypher('cypher_create', $$
	CREATE (p:n0)-[a:new]->(p:n1)
$$) as (a agtype);
ERROR:  previously declared variables cannot have a label
LINE 2:  CREATE (p:n0)-[a:new]->(p:n1)
                                 ^
SELECT * FROM cypher('cypher_create', $$
	CREATE p=(p)
$$) as (a agtype);
ERROR:  variable "p" already exists
LINE 2:  CREATE p=(p)
                ^
SELECT * FROM cypher('cypher_create', $$
	CREATE p=() CREATE (p)
$$) as (a agtype);
ERROR:  agtype must resolve to a vertex
SELECT * FROM cypher('cypher_create', $$
	CREATE p=(a)-[p:b]->(a)
$$) as (a agtype);
ERROR:  variable "p" already exists
LINE 2:  CREATE p=(a)-[p:b]->(a)
                ^
SELECT * FROM cypher('cypher_create', $$
	CREATE p=(a)-[:new]->(p)
$$) as (a agtype);
ERROR:  variable "p" already exists
LINE 2:  CREATE p=(a)-[:new]->(p)
                ^
SELECT * FROM cypher('cypher_create', $$
	MATCH (p) CREATE p=()
$$) as (a agtype);
ERROR:  variable "p" already exists
LINE 2:  MATCH (p) CREATE p=()
                          ^
SELECT * FROM cypher('cypher_create', $$
	MATCH (p) CREATE p=(p)
$$) as (a agtype);
ERROR:  variable "p" already exists
LINE 2:  MATCH (p) CREATE p=(p)
                          ^
SELECT * FROM cypher('cypher_create', $$
	MATCH (p) CREATE (a)-[p:b]->(a)
$$) as (a agtype);
ERROR:  variable p already exists
LINE 2:  MATCH (p) CREATE (a)-[p:b]->(a)
                              ^
SELECT * FROM cypher('cypher_create', $$
	CREATE (a)-[e:new]->(p)-[e]->(a)
$$) as (a agtype);
ERROR:  relationships must be specify a label in CREATE.
LINE 2:  CREATE (a)-[e:new]->(p)-[e]->(a)
                                 ^
SELECT * FROM cypher('cypher_create', $$
	CREATE (a)-[e:new]->(p)
	CREATE (p)-[e:new]->(a)
$$) as (a agtype);
ERROR:  variable e already exists
LINE 3:  CREATE (p)-[e:new]->(a)
                    ^
SELECT * FROM cypher('cypher_create', $$
	MATCH (a)-[e:new]->(p)
	CREATE (p)-[e:new]->(a)
$$) as (a agtype);
ERROR:  variable e already exists
LINE 3:  CREATE (p)-[e:new]->(a)
                    ^
-- Validate usage of keywords as labels is supported and case sensitive
SELECT * FROM cypher('cypher_create', $$
        CREATE (a:CREATE)
	RETURN a
$$) as (a agtype);
                            a                            
---------------------------------------------------------
 {"id": 68, "label": "CREATE", "properties": {}}::vertex
(1 row)

SELECT * FROM cypher('cypher_create', $$
        CREATE (a:create)
	RETURN a
$$) as (a agtype);
                            a                            
---------------------------------------------------------
 {"id": 69, "label": "create", "properties": {}}::vertex
(1 row)

SELECT * FROM cypher('cypher_create', $$
        CREATE (a:CrEaTe)
	RETURN a
$$) as (a agtype);
                            a                            
---------------------------------------------------------
 {"id": 70, "label": "CrEaTe", "properties": {}}::vertex
(1 row)

--
-- Clean up
--
DROP TABLE simple_path;
DROP FUNCTION create_test;
SELECT drop_graph('cypher_create', true);
NOTICE:  drop cascades to 21 other objects
DETAIL:  drop cascades to sequence cypher_create.vertex_id_seq
drop cascades to table cypher_create._ag_label_vertex
drop cascades to sequence cypher_create.edge_id_seq
drop cascades to table cypher_create._ag_label_edge
drop cascades to table cypher_create.v
drop cascades to table cypher_create.e
drop cascades to table cypher_create.n_var
drop cascades to table cypher_create.e_var
drop cascades to table cypher_create.n_other_node
drop cascades to table cypher_create.b_var
drop cascades to table cypher_create.new_vertex
drop cascades to table cypher_create.existing_vlabel
drop cascades to table cypher_create.existing_elabel
drop cascades to table cypher_create.knows
drop cascades to table cypher_create."Part"
drop cascades to table cypher_create.new
drop cascades to table cypher_create.node
drop cascades to table cypher_create.n1
drop cascades to table cypher_create."CREATE"
drop cascades to table cypher_create."create"
drop cascades to table cypher_create."CrEaTe"
NOTICE:  graph "cypher_create" has been dropped
 drop_graph 
------------
 
(1 row)

--
-- End
--
